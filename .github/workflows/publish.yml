name: Publish

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update package version from plugin
        id: version_update
        run: |
          # Define plugin filename
          plugin_file="rrze-plugin-test.php"

          # Extract current version from plugin file
          version=$(grep -oP 'Version:\s*\K[0-9]+\.[0-9]+\.[0-9]+' "$plugin_file")
          echo "Current version: $version"

          # Set version as output
          echo "version=$version" >> $GITHUB_OUTPUT

          # Update version in package.json if it exists
          if [ -f "package.json" ]; then
            jq --arg new_version "$version" '.version = $new_version' package.json > tmp.json && mv tmp.json package.json
          else
            echo "package.json not found, skipping version update in package.json"
          fi

          # Extract plugin data from plugin file excluding the /* and */ lines
          plugin_data=$(awk '/^[ \t]*\*?[ \t]*(Plugin Name|Plugin URI|Version|Description|Author|Author URI|License|License URI|Text Domain|Domain Path|Requires at least|Requires PHP|Update URI):/ { gsub(/^[ \t]*\*?[ \t]*/, ""); if (NR > 1) { printf "%s<br>\n", $0 } else { print $0 } }' "$plugin_file")
          echo "$plugin_data"

          # Write plugin data to README.md
          escaped_plugin_data=$(echo "$plugin_data" | sed 's/[&/\]/\\&/g' | awk '{printf "%s\\n", $0}')
          sed -i "/<!-- BEGIN PLUGIN DATA -->/,/<!-- END PLUGIN DATA -->/c\\
          <!-- BEGIN PLUGIN DATA -->\\
          $escaped_plugin_data\\
          <!-- END PLUGIN DATA -->" README.md

      - name: Commit version changes to dev
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Publish" || echo "No changes to commit"
          git push origin dev || { echo "Error: Push to dev branch failed"; exit 1; }

      - name: Check out the main branch
        run: |
          git fetch origin
          git checkout main
          git pull origin main

      - name: Merge dev into main
        run: |
          git merge origin/dev --no-ff -m "Merging updated version from dev to main" || { echo "Error: Merge failed"; exit 1; }

      - name: Push changes to main branch
        run: |
          git push origin main || { echo "Error: Push to main branch failed"; exit 1; }

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ steps.version_update.outputs.new_version }}"
          release_name: "Release v${{ steps.version_update.outputs.new_version }}"
          draft: false
          prerelease: false
